// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  firstName         String    
  lastName          String
  profilePicture    String?
  email             String    @unique
  boards            BoardMembership[]
  ownedBoards       Board[]
  cards             CardAssignees[]
  password          String
  isAdmin           Boolean   @default(false)
}

model Board {
  id                Int       @id @default(autoincrement())
  ownerId           Int
  owner             User @relation(fields: [ownerId], references: [id])
  name              String
  columns           Column[]
  background        String?
  description       String?
  members           BoardMembership[]
  isPinned          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updateAt          DateTime  @updatedAt
}

model BoardMembership {
  id        Int     @id @default(autoincrement())
  role      String  @default("CONTRIBUTOR")
  boardId   Int
  board     Board   @relation(fields: [boardId], references: [id])
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}

model Column {
  id                Int @id @default(autoincrement())
  columnIndex       Int
  title             String
  boardId           Int
  board             Board @relation(fields: [boardId], references: [id])
  cover             String?
  cards             Card[]
  createdAt         DateTime  @default(now())
  updateAt          DateTime  @updatedAt
}

model Card {
  id                Int       @id @default(autoincrement())
  title             String
  description       String
  columnId          Int
  assignees         CardAssignees[]
  column            Column    @relation(fields: [columnId], references: [id])
  createdAt         DateTime  @default(now())
  updateAt          DateTime  @updatedAt
}

model CardAssignees {
  id        Int     @id @default(autoincrement())
  cardId    Int
  card      Card    @relation(fields: [cardId], references: [id])
  userId    Int
  user      User    @relation(fields: [userId], references: [id])     
}

model RefreshToken {
  id                Int       @id @default(autoincrement())
  userId            Int
  accessToken       String    @unique
  refreshToken      String    @unique
  createdAt         DateTime  @default(now())
  updateAt          DateTime  @updatedAt
}